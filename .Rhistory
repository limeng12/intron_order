dd<-glm(O/T~., family=binomial(link = "logit"), data3);
T
O
dd
summary(dd)
O/T
L
g<-c(1,10);
data2<-data
O<-c();
L<-c();
D<-c();
T<-c();
for(i in 1:length(data2)){
data2[[i]]$L<-data2[[i]]$L*g[i];
data2[[i]]$D<-data2[[i]]$L*g[i];
O<-c(O,data2[[i]]$O);
L<-c(L,data2[[i]]$L);
D<-c(D,data2[[i]]$D);
T<-c(T,data2[[i]]$T);
}
data3<-data.frame(O=O,L=L,D=D,T=T);
dd<-glm(O/T~., family=binomial(link = "logit"), data3);
dd
summary(dd)
O
O/T
L
g<-c(1,1);
data2<-data
O<-c();
L<-c();
D<-c();
T<-c();
for(i in 1:length(data2)){
data2[[i]]$L<-data2[[i]]$L*g[i];
data2[[i]]$D<-data2[[i]]$L*g[i];
O<-c(O,data2[[i]]$O);
L<-c(L,data2[[i]]$L);
D<-c(D,data2[[i]]$D);
T<-c(T,data2[[i]]$T);
}
data3<-data.frame(O=O,L=L,D=D,T=T);
dd<-glm(O/T~., family=binomial(link = "logit"), data3);
summary(dd)
D
glm(O/T~., family=binomial(link = "logit"), data3);
O/T
L
getAbsolutePath()
library(R.utils)
getAbsolutePath()
help(  getAbsolutePath)
library(rsconnect)
install.packages("rsconnect")
library(rsconnect)
help(deployApp)
help(rnorm)
rnorm(1:5,1,1)
rnorm(1:20,1,1)
1000*12000/300
help(plot)
help(plot)
tt<-10
tt<-15
t<-tt
adj_mat <- matrix(nrow = t,ncol = t);
colnames(adj_mat)<-1:t
rownames(adj_mat)<-1:t
for( i in 1:nrow(adj_mat)){
for( j in 1:ncol(adj_mat)){
if(i!=j){
#p<-runif(1)
adj_mat[i,j]<-rpois(1,20);
adj_mat[j,i]<-rpois(1,15);
}
if(i==j){
adj_mat[i,j]<-0;
}
}
}
t_adj_mat2<-adj_mat[1:t,1:t];
path1<-find_opti_dynam(t_adj_mat2,t_alpha_v);
#library(tictoc);
get_log_sum<-function(t_sink, t_parents, t_mat_li){
##parents spliced first
a<-sum(log(t_mat_li[as.numeric(t_parents),t_sink]) );
a;
}
find_opti_dynam<-function(t_adj_mat2,t_alpha_v=0.1){
n<-nrow(t_adj_mat2);
t_adj_mat_li<-t_adj_mat2;
colnames(t_adj_mat_li)<-colnames(t_adj_mat2);
rownames(t_adj_mat_li)<-rownames(t_adj_mat2);
for(i in 1:nrow(t_adj_mat_li)){
for(j in 1:ncol(t_adj_mat_li)){
if(i==j){
t_adj_mat_li[i,j]<-t_adj_mat_li[j,i]<-0;
}
if(t_adj_mat_li[i,j]+t_adj_mat_li[j,i]==0){
next;
}
if(i>j){
p<- (t_adj_mat_li[i,j]+t_alpha_v)/(t_adj_mat_li[i,j]+t_adj_mat_li[j,i]+2*t_alpha_v);
t_adj_mat_li[i,j]<-p
t_adj_mat_li[j,i]<-1-p
}
}
}
v_set<-(1:n);
exc_set_power<-set_power(v_set);
scores<-list();
sinks<-list()
for(i in exc_set_power){
w_set<-paste0(i,collapse = ":");
#print(w_set );
scores[[w_set]]<-0;
sinks[[w_set]]<- -1;
if(length(i)>2){
for(j in i){
upvars<-cset_difference(i,j);
skore<-scores[[paste0(upvars,collapse = ":")]];
skore<-skore+get_log_sum(j,upvars,t_adj_mat_li);
#print(j);
if(sinks[[w_set]]== -1 || skore > scores[[w_set]]){
scores[[w_set]]<-skore;
sinks[[w_set]]<-j;
}
}
}else if(length(i)>1){
index_two<-as.numeric(i);
if(t_adj_mat_li[index_two[1],index_two[2]]>t_adj_mat_li[index_two[2],index_two[1]]){
scores[[w_set]]<-log(t_adj_mat_li[index_two[1],index_two[2]]);
sinks[[w_set]]<-index_two[2];
}else{
scores[[w_set]]<-log(t_adj_mat_li[index_two[2],index_two[1]]);
sinks[[w_set]]<-index_two[1];
}
}else{
scores[[w_set]]<-0;
sinks[[w_set]]<-(i)
}
#print(i)
}
ord<-c();
left<-1:n
best_socre<-scores[[paste0(left,collapse = ":") ]];
for(i in n:1){
ord[i]<-as.numeric( sinks[[paste0(left,collapse = ":")]] );
left<- setdiff(left,ord[i]);
}
#ord
list(best_order=as.character(ord),best_score=best_socre,number_of_maximum_order=NA)
}
#library(tictoc);
get_log_sum<-function(t_sink, t_parents, t_mat_li){
##parents spliced first
a<-sum(log(t_mat_li[as.numeric(t_parents),t_sink]) );
a;
}
find_opti_dynam<-function(t_adj_mat2,t_alpha_v=0.1){
n<-nrow(t_adj_mat2);
t_adj_mat_li<-t_adj_mat2;
colnames(t_adj_mat_li)<-colnames(t_adj_mat2);
rownames(t_adj_mat_li)<-rownames(t_adj_mat2);
for(i in 1:nrow(t_adj_mat_li)){
for(j in 1:ncol(t_adj_mat_li)){
if(i==j){
t_adj_mat_li[i,j]<-t_adj_mat_li[j,i]<-0;
}
if(t_adj_mat_li[i,j]+t_adj_mat_li[j,i]==0){
next;
}
if(i>j){
p<- (t_adj_mat_li[i,j]+t_alpha_v)/(t_adj_mat_li[i,j]+t_adj_mat_li[j,i]+2*t_alpha_v);
t_adj_mat_li[i,j]<-p
t_adj_mat_li[j,i]<-1-p
}
}
}
v_set<-(1:n);
exc_set_power<-set_power(v_set);
scores<-list();
sinks<-list()
for(i in exc_set_power){
w_set<-paste0(i,collapse = ":");
#print(w_set );
scores[[w_set]]<-0;
sinks[[w_set]]<- -1;
if(length(i)>2){
for(j in i){
upvars<-cset_difference(i,j);
skore<-scores[[paste0(upvars,collapse = ":")]];
skore<-skore+get_log_sum(j,upvars,t_adj_mat_li);
#print(j);
if(sinks[[w_set]]== -1 || skore > scores[[w_set]]){
scores[[w_set]]<-skore;
sinks[[w_set]]<-j;
}
}
}else if(length(i)>1){
index_two<-as.numeric(i);
if(t_adj_mat_li[index_two[1],index_two[2]]>t_adj_mat_li[index_two[2],index_two[1]]){
scores[[w_set]]<-log(t_adj_mat_li[index_two[1],index_two[2]]);
sinks[[w_set]]<-index_two[2];
}else{
scores[[w_set]]<-log(t_adj_mat_li[index_two[2],index_two[1]]);
sinks[[w_set]]<-index_two[1];
}
}else{
scores[[w_set]]<-0;
sinks[[w_set]]<-(i)
}
#print(i)
}
ord<-c();
left<-1:n
best_socre<-scores[[paste0(left,collapse = ":") ]];
for(i in n:1){
ord[i]<-as.numeric( sinks[[paste0(left,collapse = ":")]] );
left<- setdiff(left,ord[i]);
}
#ord
list(best_order=as.character(ord),best_score=best_socre,number_of_maximum_order=NA)
}
t<-tt
adj_mat <- matrix(nrow = t,ncol = t);
colnames(adj_mat)<-1:t
rownames(adj_mat)<-1:t
for( i in 1:nrow(adj_mat)){
for( j in 1:ncol(adj_mat)){
if(i!=j){
#p<-runif(1)
adj_mat[i,j]<-rpois(1,20);
adj_mat[j,i]<-rpois(1,15);
}
if(i==j){
adj_mat[i,j]<-0;
}
}
}
t_adj_mat2<-adj_mat[1:t,1:t];
path1<-find_opti_dynam(t_adj_mat2,t_alpha_v);
# tt<-15
t_alpha_v<-0.1
path1<-find_opti_dynam(t_adj_mat2,t_alpha_v);
#library(tictoc);
library(sets)
t_adj_mat2<-adj_mat[1:t,1:t];
path1<-find_opti_dynam(t_adj_mat2,t_alpha_v);
tt<-12
# tt<-12
t_alpha_v<-0.1
t<-tt
adj_mat <- matrix(nrow = t,ncol = t);
colnames(adj_mat)<-1:t
rownames(adj_mat)<-1:t
for( i in 1:nrow(adj_mat)){
for( j in 1:ncol(adj_mat)){
if(i!=j){
#p<-runif(1)
adj_mat[i,j]<-rpois(1,20);
adj_mat[j,i]<-rpois(1,15);
}
if(i==j){
adj_mat[i,j]<-0;
}
}
}
t_adj_mat2<-adj_mat[1:t,1:t];
path1<-find_opti_dynam(t_adj_mat2,t_alpha_v);
print("finished dyna");
tt<-13
# tt<-13
t_alpha_v<-0.1
t<-tt
adj_mat <- matrix(nrow = t,ncol = t);
colnames(adj_mat)<-1:t
rownames(adj_mat)<-1:t
for( i in 1:nrow(adj_mat)){
for( j in 1:ncol(adj_mat)){
if(i!=j){
#p<-runif(1)
adj_mat[i,j]<-rpois(1,20);
adj_mat[j,i]<-rpois(1,15);
}
if(i==j){
adj_mat[i,j]<-0;
}
}
}
t_adj_mat2<-adj_mat[1:t,1:t];
path1<-find_opti_dynam(t_adj_mat2,t_alpha_v);
print("finished dyna");
Rcpp::sourceCpp('Documents/projects/iso/code/mlp9.cpp')
library(igraph)
a<-matrix(0,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0,nrow=4,byrow = TRUE)
a<-matrix( c(0,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0),nrow=4,byrow = TRUE);
a
library(igraph)
a<-matrix( c(0,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0),nrow=4,byrow = TRUE);
colnames(a)<-1:4
rownames(a)<-1:4
g2<-graph_from_adjacency_matrix(a, mode = c("directed") )
print(g2)
plot(g2)
a
plot(g2,layout=layout.circle)
plot(g2,layout=layout_with_fr)
plot(g2,layout=l)
plot(g2,layout=l)
plot(g2,layout=layout_on_grid)
plot(g2,layout=layout.sugiyama)
plot(g2,layout=layout_with_sugiyama)
plot(g2,layout=layout_with_sugiyama)
plot(g2,layout=layout_sugiyama)
l <- layout_with_sugiyama(g2)
plot(g2, layout=l)
l <- layout_with_sugiyama(g2)
plot(g2, layout=l)
l <- layout_with_sugiyama(g2,layers = rep(1,4))
plot(g2, layout=l)
layex <- layout_with_sugiyama(g2,layers = rep(1,4))
plot(g2, layout=layex)
plot(layex$extd_graph)
a
layex <- layout_with_sugiyama(g2)
#plot(g2, layout=layex)
plot(layex$extd_graph)
g2<-graph_from_adjacency_matrix(a, mode = c("directed") )
layex <- layout_with_sugiyama(g2)
#plot(g2, layout=layex)
plot(layex$extd_graph)
a
g2<-graph_from_adjacency_matrix(a, mode = c("directed") )
layex <- layout_with_sugiyama(g2)
g2<-graph_from_adjacency_matrix(a, mode = c("directed") )
plot(g2, layout=layex$layout)
library('igraph')
nodes <- c('a','b','c','d')
x <- c(0,1,2,3)
y <- c(0,1,2,3)
from <- c('a','b','c')
to <- c('b','c','d')
NodeList <- data.frame(nodes, x ,y)
EdgeList <- data.frame(from, to)
a<- graph_from_data_frame(vertices = NodeList, d= EdgeList, directed = FALSE)
plot(a)
library('igraph')
nodes <- c('a','b','c','d')
x <- c(0,1,2,3)
y <- c(0,1,2,3)
from <- c('a','b','c','a')
to <- c('b','c','d','d')
NodeList <- data.frame(nodes, x ,y)
EdgeList <- data.frame(from, to)
a<- graph_from_data_frame(vertices = NodeList, d= EdgeList, directed = FALSE)
plot(a)
a<- graph_from_data_frame(vertices = NodeList, d= EdgeList, directed = TRUE)
plot(a)
library('igraph')
nodes <- c('a','b','c','d')
x <- c(0,1,2,3)
y <- c(0,1,2,3)
from <- c('a','b','c','a')
to <- c('b','c','d','d')
NodeList <- data.frame(nodes, x ,y)
EdgeList <- data.frame(from, to)
a<- graph_from_data_frame(vertices = NodeList, d= EdgeList, directed = TRUE)
plot(a)
curve_multiple(a,start=0.8)
plot(a)
EdgeList <- data.frame(from, to)
a<- graph_from_data_frame(vertices = NodeList, d= EdgeList, directed = TRUE)
curve_multiple(a,start=0.8)
plot(a)
from <- c('a','b','c','a','a')
to <- c('b','c','d','d','c')
NodeList <- data.frame(nodes, x ,y)
EdgeList <- data.frame(from, to)
a<- graph_from_data_frame(vertices = NodeList, d= EdgeList, directed = TRUE)
curve_multiple(a,start=0.8)
plot(a)
58/(58+9)
2/(2+7)
help(sliderInput)
library(shiny)
help(sliderInput)
2.1/2.2
1.1/1.2
4.1/4.2
(58.1)/(58+9+0.2)
2.1/9.2
2^10
source('~/Documents/projects/iso/intron_order/run.R', echo=TRUE)
library(rstudioapi)
this.dir<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(this.dir);
source('~/Documents/projects/iso/intron_order/run.R', echo=TRUE)
source('~/Documents/projects/iso/intron_order/run.R', echo=TRUE)
t_igraph_list<-get_adj("result/iso_test_unique_order_by_count_graph_output.pdf",
iso_final,iso_slow_sumary,
isoform_num_produce,
draw_and_save_graph,return_graph);
get_adj
##calculated intron splicing order adjacent matrix
t_igraph_list<-get_adj("result/iso_test_unique_order_by_count_graph_output.pdf",
iso_final,iso_slow_sumary,
isoform_num_produce,
draw_and_save_graph,return_graph);
##caculated intron splicing unit
t_igraph_list<-get_members(t_igraph_list,t_alpha);
##most likely order
t_igraph_list<-cal_mlp(t_igraph_list,"./result/best_order.tsv",t_alpha,read_count_threshold);
##draw intron splicing order graph
t_igraph_list<-draw_3d(t_igraph_list, paste0(getwd(),"./result/html/"),t_alpha,TRUE);
getwd()
getwd()
##draw intron splicing order graph
t_igraph_list<-draw_3d(t_igraph_list, paste0(getwd(),"/result/html/"),t_alpha,TRUE);
##output intron splicing order adjacent matrix
for( i in 1:length(t_igraph_list) ){
write.table(t_igraph_list[[i]]$adjacency_matrix, file=str_c("./result/adj_matrix/",names(t_igraph_list)[i],".tsv" ),
sep="\t",col.names = FALSE,row.names = FALSE  );
}
save( t_igraph_list, file="result/t_igraph_list.Rd",version = 2);
library(shiny);
library(networkD3);
library(Sushi);
library(readr);
library(DT);
library(dplyr);
library(igraph);
library(dbscan);
library(stringr);
library(gtools);
library(rstudioapi)
this.dir<-(dirname(dirname(rstudioapi::getActiveDocumentContext()$path) ) );
setwd(this.dir);
#setwd("/Users/mengli/Documents/projects/iso");
#script.dir <- dirname(sys.frame(1)$ofile)
source("code/utils.R")
source("code/build_iso_object.R",echo=TRUE);
####################################calculate pairwise intron orders#######################################################
#script to remove sick in bed
# awk '{print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$1"\t"$2"\t"$9"\t"$10"\t"$11"\t"$12}' hg19_gencode_from_ucsc.bed >
# hg19_gencode_from_ucsc_nothick_nocds.bed
## samtools index <Bam file>
## java -jar isoLarge.jar  anno/hg19_gencode_from_ucsc_nothick_nocds.bed  <bam_file> <output_file>
# convert bed file into introns
# code/run_sh/convert_bed_to_introns.sh
##############################prepare pairwise intron orders################################################################
files_all<-list.files("fly/iso/",full.names =TRUE,pattern = "*unique_intron.tsv");
label<-"fly"
is_large=TRUE;
read_count_threshold<-0
#gene_trans_id_tbl<-"./fly/gene_id_trans_id_fly.tsv";
gene_trans_id_tbl<-"./fly/gene_id_trans_id_fly.tsv";
ucsc_intron_anno<-"./fly/dm6_ensembl_intron.bed";
if_uniq="uniq_intron";
if(is_large){
if_uniq="not_uniq_intron";
}
t_result_path<-paste0("fly/all_iso_data_",label,"_",if_uniq,".Rd") ;
build_iso_object(files_all,gene_trans_id_tbl,ucsc_intron_anno,is_large,t_result_path,TRUE,3,
read_count_threshold=read_count_threshold,trans_exp_file="fly/s2_exp_trans_id.tsv");
######################################build matrix graph MLO##########################################################
#isoform_num_produce<-1000
draw_and_save_graph<-FALSE # not used
return_graph<-TRUE;
t_alpha<-0.1;
load(t_result_path);
source("code/draw.R");
#source("code/mlp.R");
source("code/draw_3d.R");
source("code/mlp3.R");
source("code/get_adj.R");
source("code/get_members.R");
source("code/cal_mlp_graph.R");
isoform_num_produce<-10000
iso_slow_sumary[,"percent_intron_pair_coverage"]<-(iso_slow_sumary$intron_pair_count)/
(iso_slow_sumary[,"int_count"]*(iso_slow_sumary[,"int_count"]-1)/2)
iso_slow_sumary<-iso_slow_sumary[order( iso_slow_sumary[,"percent_intron_pair_coverage"],decreasing = TRUE),];
print(paste0("Number of multi introns genes that detected=", nrow(iso_slow_sumary) ) );
isoform_num_produce<-sum(iso_slow_sumary[,"percent_intron_pair_coverage"]>0.95);
print(paste0("Number of multi introns genes that contain intron pairs >95%", isoform_num_produce ) );
summary(iso_slow_sumary[iso_slow_sumary[,"percent_intron_pair_coverage"]>0.95,"percent_intron_pair_coverage"])
iso_slow_sumary$id=="FBtr0303222"
sum(iso_slow_sumary$id=="FBtr0303222")
iso_final[iso_final$id=="FBtr0303222",]
View(FBtr0303222)
View(iso_final[iso_final$id=="FBtr0303222",])
#
#
load("anno/sushi_trans_file.Rd");
####set directory ####
if (!requireNamespace("rstudioapi", quietly = TRUE) )
install.packages("rstudioapi");
library(rstudioapi)
this.dir<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(this.dir);
gene_trans_id_map<-read.table("anno/hg19_ensembl_gene_id_trans_id_map.tsv",
header = FALSE,as.is = TRUE,sep = "\t");
colnames(gene_trans_id_map)<-c("gene_id","trans_id","gene_symbol","trans_start","trans_end","strand",
"chr","gene_start","gene_end");
#
#
load("anno/sushi_trans_file.Rd");
load( file="result/t_igraph_list.Rd");
source("code/app_r.R",echo = TRUE);
shinyApp(ui = ui, server = server);
source('~/Documents/projects/iso/intron_order/code/app_r.R', echo=TRUE)
