5.7*2*12.5
2120-1030
380*4
2700/8
1976-1892
14803-6524
-1*log(-10)
-1*log10(0.05)
-1*log10(0.01)
178/2
-1*log10(0.05)
136/2
6982/2
install.packages("devtools")
library(devtools)
install_github("limeng12/faers")
21+56+16+185+159
280+42+128
21+56+16+185+1159
350+48+108+480
48+108+480+205+9+217+345
20+35+135+60
152/2
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("nucleR")
biocLite("nucleR")
biocLite("nucleR")
source("http://bioconductor.org/biocLite.R")
biocLite("nucleR")
biocLite("nucleR")
source("http://bioconductor.org/biocLite.R")
biocLite("nucleR")
biocLite("nucleR")
biocLite("nucleR")
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
biocLite("nucleR")
BiocInstaller::biocLite(nucleR)
BiocInstaller::biocLite("nucleR")
BiocInstaller::biocLite("nucleR")
BiocInstaller::biocLite("nucleR")
source("http://bioconductor.org/biocLite.R")
BiocInstaller::biocLite("nucleR")
BiocInstaller::biocLite("nucleR")
source("http://bioconductor.org/biocLite.R")
biocLite("nucleR")
biocLite("nucleR")
install.packages("~/Downloads/nucleR_2.12.0.tgz", repos = NULL, type = .Platform$pkgType)
library(nucleR)
biocLite("ShortRead")
source("https://bioconductor.org/biocLite.R")
source("https//bioconductor.org/biocLite.R")
biocLite("nucleR")
source("http://bioconductor.org/biocLite.R")
biocLite("ShortRead")
biocLite("BiocInstaller")
biocLite("BiocInstaller")
library(nucleR)
example(nucleR)
library(nucleR)
example(nucleR)
help(coverage.rpm)
100-27*0.333
100-(273+27)*0.333
100-(273+27)*0.433
1/(3*1^7)
1/(3*10^7)
1/(3*10^7)*1000*1000*1000
1/(5*10^4)*1000*1000
1/(1.25*10^7)*1000*1000*1000
500/(1.25*10^7)*1000*1000
4*3*2
106/16
106/16*14
18*5/6
90+8*1.5+8*2.5
0.4*24
log(2)/(0.2*log(10))
535*24
74.9/(535*24)
58/8000
2000/4/2
147/4
198/12
198/8
294/4
1187/12
1187/12
150/4*3
499+29
499+29
250/4*3
150/4
500/8*5
50/8*5
139/4
107.9+14+16*3
7/58.5
95/169.9
143.4*0.12
65.4+35.5*2
26/65.4
42/36.5
0.3975*136.4
56
56*2+16*3
10/56
7/32
0.1786/0.22
0.1786/2
160*0.089
5/58.5
103/95
143.4*0.0855
19.63.5
19/63.5
125/169.9
0.299*2*107.9
12/58
42/36.5
0.207*71
95*0.207
15/16
114/32
0.9375*44
342.3*0.0287
56*2+16*3
24/56
5/32
0.43/2
0.215*160
0.15625/3*2
0.15625/3*2*160
27/56
0.24*160
27/55.845
27/55.845/2*160
27/55.845/2*2(55.845*2+16*3)
27/55.845/2*2*(55.845*2+16*3)
55.845*2+16*3
27/55.845/2*(55.845*2+16*3)
27/55.845/2*(55.845*2+16*3)
12*3+8
32*5
12*16*2
12+16*2
39/44
11/32
11/32/5*3*44
23/65.38
13.8/58.44
138.12*0.802
6.626*10^-34*6.2*10^-14
6.626*10^-34*6.2*10^14
6.626*10^-34*6.2*10^14-3.28*10^-20
46.8*10
46.8*1
46.8*11
46.8*12
-1*log10(0.025*2)
-1*log(5.2*10^-3)
-1*log10(5.2*10^-3)
poh<-14-9.7
poh
10^poh*-1
10^(poh*-1)
(5.011872e-05*5.011872e-05)/(1.5-5.011872e-05)
454215558/3
454215558/4
(454215558-10000)/4
3/15
3/18
15/18
500*5
86*40
57*41
76*45
65*45
51*86
86*40
0.35*200
33.9*7
33.9*6
33.9*5
33.9*9
source('~/Documents/projects/abs/code/count_jc_RBP.R', echo=TRUE)
Pi
PI
3.14*25
3.14*(7.5)^2
176.625/78.5
install.packages("rlang")
26/5
install.packages("rgexf")
library(ranger)
help(importance_pvalues)
pdf("decision_tree_ri.pdf",width=84,height=10);
plot(decision_tree_class);
dev.off();
help(ctree)
library(partykit);
help(ctree)
system("scp limeng@10.10.118.191:/picb/rnasys2/limeng/RBP_network/anno/\\*tsv /Users/mengli/Documents/projects/RBP_network/anno/")
512*19/89/313
353*8/207/17
(2/6)*(11/11)*(5/5)*(7/7)*(0.001/3.001)
(4/6)*(11/11)*(5/5)*(7/7)*(0.001/3.001)
factorial(10)
sample(1:5,)
sample(1:5)
help(sample)
sample(1:5,2)
sample(1:5,5)
help(binom.test)
binom.test(10,10+10)
binom.test(11,10+10)
binom.test(1,10+10)
binom.test(1,10+1)
binom.test(2,10+2)
-1*12/13*log2(12/13)-1/13*log2(1/13)
-1*1/5*log2(1/5)-4/5*log2(4/5)
-1*4/(9)*log2(4/9)-5/9*log2(5/9)
-1*0.5*log(0.5)
-1*0.3*log(0.3)
-1*0.1*log(0.1)
-1*0.9*log(0.9)
-1*0.2*log(0.2)
-1*log(0.8)*0.8
-1*log(0.2)*0.2
-1*log(0.5)*0.5
e(-1*log(0.5)*0.5)
exp(-1*log(0.5)*0.5)
10^(-1*log(0.5)*0.5)
10^(-1*log(0.5)*0.5)
10^(-1*log(0.5)*0.5)
10^(-1*log(0.5)*0.5)
10^(-1*log(0.9)*0.9)
(-1*log(0.09)*0.09)
(-1*log(0.009)*0.009)
(-1*log(0.0009)*0.0009)
(-1*log(0.0001)*0.0001)
(-1*log(0.000001)*0.000001)
source('~/Documents/projects/iso/code/combine_rho.R', echo=TRUE)
source('~/Documents/projects/iso/code/combine_rho.R', echo=TRUE)
combine_rho2( x,y)
x<-c(rho1,rho2)
y<-c(10,10)
combine_rho2( x,y)
#
# data<-data.frame(a=a,
#                  b=b,
#                  d=d)
#
#
#
rho1<-cor(a,d,method = "spearman");
rho2<-cor(a,b,method = "spearman");
x<-c(rho1,rho2)
y<-c(10,10)
combine_rho2( x,y)
#
d<-c(2,1,4,5,6,7,8,9,3,21);
#
# data<-data.frame(a=a,
#                  b=b,
#                  d=d)
#
#
#
rho1<-cor(a,d,method = "spearman");
x<-c(rho1,rho2)
combine_rho(x)
y<-c(10,10)
combine_rho2( x,y)
rho_vs<-c(0.7,0.6)
n_v<-c(10,10)
rho_a<-0;
rho_b<-0;
rho_a<-0;
rho_b<-0;
##fisher transformation and sum
for( i in 1:length(rho_vs) ){
rho_a<-rho_a+(n_v[i]-3)*atanh(rho_vs[i])
rho_b<-rho_b+(n_v[i]-3)
#rho_a<-atanh(rho1)+rho_a;
}
z<-rho_a/rho_b
pho_w<-tanh(z)
z
pho_w
e<-1:5
d<-c(2,1,4,5,6);
#
# data<-data.frame(a=a,
#                  b=b,
#                  d=d)
#
#
#
rho1<-cor(e,d,method = "spearman");
rho2<-cor(a,b,method = "spearman");
x<-c(rho1,rho2)
combine_rho(x)
y<-c(10,10)
combine_rho2(x,y)
source('~/Documents/projects/iso/code/combine_rho.R', echo=TRUE)
combine_rho2(x,y)
combine_rho(x)
y<-c(10,5)
combine_rho2(x,y)
combine_rho(x)
y<-c(10,5)
combine_rho2(x,y)
source('~/Documents/projects/iso/code/mlp3.R', echo=TRUE)
t_alpha_v<-0.1
t<-6
adj_mat <- matrix(nrow = t,ncol = t);
colnames(adj_mat)<-1:t
rownames(adj_mat)<-1:t
for( i in 1:nrow(adj_mat)){
for( j in 1:ncol(adj_mat)){
if(i!=j){
#p<-runif(1)
adj_mat[i,j]<-rpois(1,20)
adj_mat[j,i]<-rpois(1,15)
}
if(i==j){
adj_mat[i,j]<-0;
}
}
}
t_adj_mat2<-adj_mat[1:t,1:t];
t_adj_mat3<-t_adj_mat2;
for(i in 1:nrow(t_adj_mat3) ){
for(j in 1:ncol(t_adj_mat3) ){
if(i>j){
p_minus<-t_adj_mat3[i,j]-t_adj_mat3[j,i];
p_minus_rev<-t_adj_mat3[j,i]-t_adj_mat3[i,j];
t_adj_mat3[i,j]<-p_minus;
t_adj_mat3[j,i]<-p_minus_rev;
}
}
}
path1<-del_find_path_iter(t_adj_mat2,t_alpha_v);
path2<-find_best_order_full2(t_adj_mat2,colnames(t_adj_mat2),t_alpha_v);
print(path1$best_order);
path1$best_order
path2$best_order
debugSource('~/Documents/projects/iso/code/mlp3.R', echo=TRUE)
path1<-del_find_path_iter(t_adj_mat2,t_alpha_v);
max_index
length(max_index)
star_grow
best_start
star_grow
debugSource('~/Documents/projects/iso/code/mlp3.R', echo=TRUE)
path1<-del_find_path_iter(t_adj_mat2,t_alpha_v);
debugSource('~/Documents/projects/iso/code/mlp3.R', echo=TRUE)
1601*412368/510/162527
log(1601*412368/510/162527)
sqrt(1/1601+1/162527+1/510+1/412368)
help(pnrom)
help(rnrom)
help(pnorm)
qnorm(1)
qnorm(2)
qnorm(0.5)
qnorm(0.6)
qnorm(0.975)
qnorm(0.975,2.075,0.051)
qnorm(0.025,2.075,0.051)
1601/162527
510/412368
1601+162527
510+412368
0.00985*(1-0.00985)/164128+0.00124*(1-0.00124)/412878
sqrt(0.00985*(1-0.00985)/164128+0.00124*(1-0.00124)/412878)
0.00985-0.00124
(6002-6017)^2/6017+(2001+2005.75)^2/2005.75
(6002-6017)^2/6017+(2001-2005.75)^2/2005.75
(6022-6017)^2/6017+(2001-2005.75)^2/2005.75
285+53
285+299
53+39
299+39
584/(584+92)
338+338
help(glm)
help(lm.fit)
install.packages("glm2")
library(glm2)
help(glm2)
install.packages("ordinal")
data<-list(a=list(
O=c(1,2,3,4),
L=c(3,4,5,6),
D=c(4,4,4,4)
),
b=list(
O=c(1,2,3),
L=c(3,4,6),
D=c(2,2,2)
))
data
data<-list(a=list(
O=c(1,2,3,4),
L=c(3,4,5,6),
D=c(4,4,4,4),
T=c(4,4,4,4)
),
b=list(
O=c(1,2,3),
L=c(3,4,6),
D=c(2,2,2),
T=c(3,3,3)
))
g<-c(1,2)
data2<-data
O<-c();
L<-c();
D<-c();
T<-c();
for(i in 1:length(data2)){
data2[[i]]$L<-data2[[i]]$L*g[i];
data2[[i]]$D<-data2[[i]]$L*g[i];
O<-c(O,data2[[i]]$O);
L<-c(O,data2[[i]]$L);
D<-c(O,data2[[i]]$D);
T<-c(O,data2[[i]]$T);
}
data3<-data.frame(O=O,L=L,D=D,T=T);
O
L
D
T
data3<-data.frame(O=O,L=L,D=D,T=T);
O
L
g<-c(1,2);
data2<-data
O<-c();
L<-c();
D<-c();
T<-c();
for(i in 1:length(data2)){
data2[[i]]$L<-data2[[i]]$L*g[i];
data2[[i]]$D<-data2[[i]]$L*g[i];
O<-c(O,data2[[i]]$O);
L<-c(L,data2[[i]]$L);
D<-c(D,data2[[i]]$D);
T<-c(T,data2[[i]]$T);
}
data3<-data.frame(O=O,L=L,D=D,T=T);
dd<-glm(O/T~., family=binomial(link = "logit"), data3);
T
O
dd
summary(dd)
O/T
L
g<-c(1,10);
data2<-data
O<-c();
L<-c();
D<-c();
T<-c();
for(i in 1:length(data2)){
data2[[i]]$L<-data2[[i]]$L*g[i];
data2[[i]]$D<-data2[[i]]$L*g[i];
O<-c(O,data2[[i]]$O);
L<-c(L,data2[[i]]$L);
D<-c(D,data2[[i]]$D);
T<-c(T,data2[[i]]$T);
}
data3<-data.frame(O=O,L=L,D=D,T=T);
dd<-glm(O/T~., family=binomial(link = "logit"), data3);
dd
summary(dd)
O
O/T
L
g<-c(1,1);
data2<-data
O<-c();
L<-c();
D<-c();
T<-c();
for(i in 1:length(data2)){
data2[[i]]$L<-data2[[i]]$L*g[i];
data2[[i]]$D<-data2[[i]]$L*g[i];
O<-c(O,data2[[i]]$O);
L<-c(L,data2[[i]]$L);
D<-c(D,data2[[i]]$D);
T<-c(T,data2[[i]]$T);
}
data3<-data.frame(O=O,L=L,D=D,T=T);
dd<-glm(O/T~., family=binomial(link = "logit"), data3);
summary(dd)
D
glm(O/T~., family=binomial(link = "logit"), data3);
O/T
L
getAbsolutePath()
library(R.utils)
getAbsolutePath()
help(  getAbsolutePath)
source('~/Documents/projects/iso/intron_order/run.R', echo=TRUE)
