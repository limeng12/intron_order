}
server <- function(input, output, session) {
print("init");
re_gra<-function(){
}
#t_net_one<-NULL;
#cur_graph_content<-NULL;
observeEvent(input$gene, {
org<-input$organism
g<-input$gene;
print("observeEvent(input$gene");
print(g);
gene_trans_id_map<-t_igraph_list_parent[[org]]$gene_trans_id_map
trans_ids<-gene_trans_id_map[gene_trans_id_map$gene_symbol==g,"trans_id"];
print(trans_ids);
trans_ids<-sort(intersect(trans_ids,t_igraph_list_parent[[org]]$all_trans_id_graph) );
updateSelectInput(session, "transcript",
label = paste0("Transcript"),
choices = trans_ids,
selected = trans_ids[1] )
});
observeEvent(input$organism,{
org<-input$organism
gene_trans_id_map<-t_igraph_list_parent[[org]]$gene_trans_id_map
g<-gene_trans_id_map$gene_symbol[2];
print("observeEvent(input$organism");
print(g);
gene_symbols<-sort(intersect(gene_trans_id_map$gene_symbol,t_igraph_list_parent[[org]]$all_gene_symbol_graph ) );
sel_gen_symbols<-gene_symbols[2];
if(org=="human"){
sel_gen_symbols<-init_gene_symbol;
}
updateSelectInput(session, "gene",
label = paste0("gene"),
choices = gene_symbols,
selected = sel_gen_symbols );
trans_ids<-gene_trans_id_map[gene_trans_id_map$gene_symbol==g,"trans_id"];
#print(trans_ids);
trans_ids<-sort(intersect(trans_ids,t_igraph_list_parent[[org]]$all_trans_id_graph) );
updateSelectInput(session, "transcript",
label = paste0("Transcript"),
choices = trans_ids,
selected = trans_ids[1] )
});
data<-eventReactive(input$update,{
});
output$trans_struc<-renderImage({
org<-input$organism
#m_trans<<-input$transcript;
g<-input$gene;
#print(g);
m_trans<-input$transcript;
#trans_ids<-gene_trans_id_map[gene_trans_id_map$gene_symbol==g,"trans_id"];
#  g<-"SNHG1"
gene_trans_id_map<-t_igraph_list_parent[[org]]$gene_trans_id_map;
chrom = paste0("chr", unique(gene_trans_id_map[gene_trans_id_map$gene_symbol==g,"chr"]) );
#chromstart = min(gene_trans_id_map[gene_trans_id_map$gene_symbol==g,"gene_start"]);
#chromend = max(gene_trans_id_map[gene_trans_id_map$gene_symbol==g,"gene_end"]);
#  m_trans<-"ENST00000282074"
for_sushi<-t_igraph_list_parent[[org]]$for_sushi;
chromm="";
if( str_detect(for_sushi[1,"chrom"],"chr" ) ){
chromm = paste0("chr", unique(gene_trans_id_map[gene_trans_id_map$trans_id==m_trans,"chr"]) );
}else{
chromm = paste0( unique(gene_trans_id_map[gene_trans_id_map$trans_id==m_trans,"chr"]) );
}
chromstart = min(gene_trans_id_map[gene_trans_id_map$trans_id==m_trans,"trans_start"]);
chromend = max(gene_trans_id_map[gene_trans_id_map$trans_id==m_trans,"trans_end"]);
outfile <- tempfile(fileext=".png");
chromstart<-as.numeric(chromstart)-10;
chromend<-as.numeric(chromend)+10;
for_sushi<-t_igraph_list_parent[[org]]$for_sushi;
for_sushi_tmp<-for_sushi[(for_sushi$start>=chromstart) &
(for_sushi$end<=chromend)&
(for_sushi$chrom==chromm), ];
print(paste0(chromm,":",chromstart,"-",chromend) );
print(paste0(for_sushi_tmp[1,],collapse = ":"))
#View(for_sushi_tmp);
#a<<-for_sushi_tmp
#outfile<-"result/"
#png(outfile,width = 900,height=350, res=100 );
#png(outfile);
par( mar=c(0.5, 0.0, 0.5, 0.5) );
if(is.null(for_sushi_tmp) || nrow(for_sushi_tmp)==0){
return(list(src = outfile,
alt = "Transcription structure"))
}
png(outfile,width = 900,height=550, res=100 );
par( mar=c(0.5, 0.0, 2.5, 0.5) );
pg = plotGenes(for_sushi_tmp,chrom,chromstart,chromend,types=for_sushi_tmp$type,
bheight =0.2, plotgenetype = "box",bentline=FALSE,
labeloffset = .4,labeltext = TRUE,fontsize=0.5,packrow=TRUE);
labelgenome(chrom, chromstart, chromend, side=3, n=3, scale="Mb");
dev.off();
list(src = outfile,
alt = "Transcription structure")
})
#renderImage
output$mlpPlot<-renderPlot( {
org<-input$organism;
m_trans<-input$transcript;
m_read_count<-input$readCount
m_alpha<-input$alpha;
if(is.null(t_igraph_list_parent[[org]]$t_igraph_list[[m_trans]]$adjacency_matrix)){
return(NULL);
}
m_adj_matris<-filter_matrix_read_count(t_igraph_list_parent[[org]]$t_igraph_list[[m_trans]]$adjacency_matrix,m_read_count);
#orders<-t_igraph_list_parent[[org]]$t_igraph_list[[m_trans]]$best_order;
m_alpha<-input$alpha;
best_order_ls<-find_path_global(m_adj_matris, m_alpha);
orders<-best_order_ls$best_order;
NodeList <- data.frame(nodes=orders, x=(0:(length(orders)-1)),
y=rep(0,length(orders)),labels=orders,r=rep(0.02,length(orders)) );
NodeList$x<-NodeList$x/max(NodeList$x)*2-1
from<-c();
to<-c();
weight<-c();
#from<-c(from,orders[i])
#to<-c(to,orders[j]);
#weight<-c(weight,m_adj_matris[orders[i],orders[j]]);
for(i in 1:length(orders) ){
for(j in 1:length(orders)){
if(i!=j){
from<-c(from,orders[i])
to<-c(to,orders[j])
weight<-c(weight,m_adj_matris[orders[i],orders[j]]);
}
}
}
EdgeList <- data.frame(from,to,weight)
g3<- graph_from_data_frame(vertices = NodeList, d= EdgeList, directed = TRUE)
#outfile <- tempfile(fileext=".png");
#outfile <- "/Users/mengli/Documents/projects/iso/order.png";
#print(outfile);
#png(outfile,width = 700,height=700, res=100 );
par(mar=c(0,0,0,0)+.1)
#curve_multiple(g3,start=0.1)
p<-ggraph(g3, layout = 'linear') +
geom_edge_arc(aes(label=weight),label_size=5,strength = 0.5,arrow = arrow(length=unit(4,'mm')),
end_cap=circle(5,'mm'),alpha=0.3)+
geom_node_point(size=8,colour="green")+geom_node_text(aes(label=labels),label.size=5)+
#geom_edge_fan(aes(alpha = stat(index)), show.legend = FALSE) +
#geom_node_point(aes(size = Popularity)) +
theme_graph(foreground = 'steelblue', fg_text_colour = 'white',border=FALSE)
print(p);
#edge.width= map(E(g3)$weight,c(2,4))
#plot(g3,edge.arrow.size=0.5,vertex.size=10,label.dist=0.5,
#     vertex.color="green",rescale=FALSE,label.color="black",label.cex=20,
#     edge.width=1,edge.label =E(g3)$weight,edge.curved=1.5)
#,margin=c(0,0,0,0)
#dev.off();
#list(src = outfile,#alt = "No trans")
})# ,deleteFile=TRUE
output$mlp<-renderText( {
org<-input$organism
m_trans<-input$transcript;
m_read_count<-input$readCount
m_alpha<-input$alpha;
if(is.null(t_igraph_list_parent[[org]]$t_igraph_list[[m_trans]]$adjacency_matrix)){
return("No display");
}
m_adj_matris<-filter_matrix_read_count(t_igraph_list_parent[[org]]$t_igraph_list[[m_trans]]$adjacency_matrix,
m_read_count);
#t_alpha<-0.1;
best_order_ls<-find_path_global(m_adj_matris, m_alpha);
orders=best_order_ls$best_order;
p_value<-best_order_ls$p_value;
disorder_p_value<-best_order_ls$disorder_p_value;
#t_igraph_list_parent[[org]]$t_igraph_list[[m_trans]]$best_order<-orders;
#t_igraph_list_parent[[org]]$t_igraph_list[[m_trans]]$p_value<-p_value;
#p_value_not_log<-as.numeric( exp(p_value ) )
paste0("Most likely order: ",paste0( orders,collapse = "-->" ),
paste0( "\nIn order spliced P-value : ",format(exp(p_value ),scientific=TRUE),
" ( log:",format(p_value,scientific=TRUE)," )" ),
paste0( "\nDisorder spliced P-value : ",format(exp(disorder_p_value ),scientific=TRUE),
" ( log:",format(disorder_p_value,scientific=TRUE)," )" )
)
});
output$downloadAllOrders <- downloadHandler(
filename = function() {
t_org<-input$downloadOrganism;
paste0(t_org,"_most_likely_orders.tsv")
},
content = function(file_a) {
t_org<-input$downloadOrganism;
t_igraph_list<-t_igraph_list_parent[[t_org]]$t_igraph_list;
output_str<-c();
output_str<-c("gene_symbol\ttranscript_id\tp_value_log\tmost_likeli_order\tnumber_of_orders_have_same_prob\tpercent_coverage_order_pair");
for(i in 1:length(t_igraph_list) ){
output_str<-c(output_str,
paste0(t_igraph_list[[i]]$gene_symbol,"\t",
t_igraph_list[[i]]$trans_id,"\t",
(t_igraph_list[[i]]$p_value),"\t",
paste0(t_igraph_list[[i]]$best_order,collapse=","),"\t",
(t_igraph_list[[i]]$number_of_maximum_order),"\t",
(t_igraph_list[[i]]$percent_coverage_pair) )
);
}
writeLines(output_str, con=file(file_a) );
#write.table(adj, file=file_a, row.names = TRUE,sep="\t",col.names = TRUE,append = TRUE);
} )
output$downloadData <- downloadHandler(
filename = function() {
g<-input$gene;
m_trans<-input$transcript;
paste(g,"_",m_trans, ".tsv", sep = "")
},
content = function(file_a) {
g<-input$gene;
org<-input$organism;
m_trans<-input$transcript;
adj<-t_igraph_list_parent[[org]]$t_igraph_list[[m_trans]]$adjacency_matrix;
m_trans<-input$transcript;
p_value=t_igraph_list_parent[[org]]$t_igraph_list[[m_trans]]$p_value;
p_value_str<-paste0( "In order spliced P-value (log): ",p_value)
m_trans<-input$transcript;
orders<-t_igraph_list_parent[[org]]$t_igraph_list[[m_trans]]$best_order;
orders_str<-paste0("Most likely order: ",paste0( orders,collapse = "-->" ) )
cat( paste0(p_value_str,"\n",orders_str,"\n"),file=file_a,append = FALSE);
write.table(adj, file=file_a, row.names = TRUE,sep="\t",col.names = TRUE,append = TRUE);
} )
output$mytable = DT::renderDataTable({
org<-input$organism;
g<-input$gene;
m_trans<-input$transcript;
m_read_count<-input$readCount
#adj<-t_igraph_list_parent[[org]]$t_igraph_list[[m_trans]]$adjacency_matrix;
if(is.null(t_igraph_list_parent[[org]]$t_igraph_list[[m_trans]]$adjacency_matrix)){
return("No display");
}
#filter read pairs that sum < m_read_count
adj<-filter_matrix_read_count(t_igraph_list_parent[[org]]$t_igraph_list[[m_trans]]$adjacency_matrix,
m_read_count);
#t_alpha<-0.1;
if(input$orderMLO){
m_alpha<-input$alpha;
best_order_ls<-find_path_global(adj, m_alpha);
orders<-best_order_ls$best_order;
#orders<-t_igraph_list_parent[[org]]$t_igraph_list[[m_trans]]$best_order;
adj_tmp<-adj[orders,orders];
adj<-adj_tmp;
}
adj
},options=list(paging=FALSE, ordering=FALSE,searching=FALSE))
output$mytable_fre = DT::renderDataTable({
org<-input$organism;
g<-input$gene;
t_alpha_v<-input$alpha;
m_trans<-input$transcript;
#adj<-t_igraph_list_parent[[org]]$t_igraph_list[[m_trans]]$adjacency_matrix;
m_read_count<-input$readCount
#adj<-t_igraph_list_parent[[org]]$t_igraph_list[[m_trans]]$adjacency_matrix;
if(is.null(t_igraph_list_parent[[org]]$t_igraph_list[[m_trans]]$adjacency_matrix)){
return("No display");
}
#filter read pairs that sum < m_read_count
adj<-filter_matrix_read_count(t_igraph_list_parent[[org]]$t_igraph_list[[m_trans]]$adjacency_matrix,
m_read_count);
t_adj_mat_li<-adj+t_alpha_v;
for(i in 1:nrow(t_adj_mat_li)){
for(j in 1:ncol(t_adj_mat_li)){
if(i>j){
p<-t_adj_mat_li[i,j]/(t_adj_mat_li[i,j]+t_adj_mat_li[j,i])
t_adj_mat_li[i,j]<-(p);
t_adj_mat_li[j,i]<-(1-p);
}
if(i==j){
t_adj_mat_li[i,j]<-0
}
}
}
t_adj_mat_li<-apply(t_adj_mat_li,c(1,2),format,digits=2);
if(input$orderMLOFreq){
m_alpha<-input$alpha;
best_order_ls<-find_path_global(adj, m_alpha);
orders<-best_order_ls$best_order;
#orders<-t_igraph_list_parent[[org]]$t_igraph_list[[m_trans]]$best_order;
t_adj_mat_li_format_tmp<-t_adj_mat_li[orders,orders];
t_adj_mat_li<-t_adj_mat_li_format_tmp;
t_adj_mat_li<-datatable(t_adj_mat_li,options=list(paging=FALSE, ordering=FALSE,searching=FALSE)) %>% formatStyle(
orders,
backgroundColor = styleInterval(c(10^(-100),0.5), c('#FFFFFF','#66A61E', '#E6AB02') ) );
}
#
t_adj_mat_li
},options=list(paging=FALSE, ordering=FALSE,searching=FALSE))
output$g2<-renderForceNetwork( {
org<-input$organism
g<-input$gene;
m_charge<-input$charge;
m_linkDistance<-input$linkDistance;
m_nodesize<-input$nodesize;
m_fontsize<-input$fontSize;
m_trans<-input$transcript;
m_read_count<-input$readCount
print("renderForceNetwork");
print(org);
print(m_trans)
if(is.null(t_igraph_list_parent[[org]]$t_igraph_list[[m_trans]]$adjacency_matrix)){
return(NULL);
}
m_adj_matris<-filter_matrix_read_count(t_igraph_list_parent[[org]]$t_igraph_list[[m_trans]]$adjacency_matrix,
m_read_count)
m_alpha<-input$alpha;
#best_order_ls<-find_path_global(m_adj_matris, t_alpha);
g2<-graph_from_adjacency_matrix(m_adj_matris,mode="directed",weighted=TRUE);
#mermbers<-t_igraph_list[[i]]$members;
mermbers<-get_members_matrix(m_adj_matris,m_alpha);
t_net_one<-igraph_to_networkD3(g2, mermbers);
#edge_width=map( E(g2)$weight, c(0.25,6) );
t_net_one$nodes[,"node_size"]<-rep(15,length(V(g2) ));
#t_net_one$links
t_net_one$links$value<-t_net_one$links$value/(max(t_net_one$links$value))*10;
par(mar=c(0,0,0,0));
t<-list(
net=forceNetwork(Links = t_net_one$links, Nodes = t_net_one$nodes,
Source = 'source', Target = 'target', Value='value', NodeID = 'name',
Group = 'group',arrows=TRUE,Nodesize='node_size',
opacity=1, bounded=TRUE, legend=TRUE,linkDistance=m_linkDistance,
charge = m_charge, zoom=FALSE, opacityNoHover = 0.9,
radiusCalculation = JS( paste0(" Math.sqrt(d.nodesize)*",m_nodesize ) ),
fontSize=m_fontsize)
);
#print("dfdf");
return(t$net);
} );
}
ui <- navbarPage("Intron splicing order",
#fontSize
#titlePanel(title="","Intron splicing order"),
#textOutput("mlp2"),
#hr(),
tabPanel("Viewer",
sidebarLayout(
sidebarPanel(
# init_gene_symbol
tabsetPanel(
tabPanel("Cal-pars",
selectInput("organism","Organism", choices=names(t_igraph_list_parent),
selected=init_organism ),
selectInput("gene","Gene", choices=sort(t_igraph_list_parent[[init_organism]]$all_gene_symbol_graph),
selected=init_gene_symbol ),
selectInput("transcript","Transcript",
choices=init_trans_choices ,
selected=init_trans_selected ) ,
sliderInput("readCount", "ReadCount ",0 , min = 0,
max = 50, step = 1),
sliderInput("alpha", "Adjust value ",0.1 , min = 0,
max = 1, step = 0.01)
),
tabPanel("Graph-par",
#actionButton("update","update"),
sliderInput("charge", "Charge ", -50, min = -300,
max = 0, step = 1),
sliderInput("linkDistance", "LinkDistance ",250 , min = 0,
max = 800, step = 1),
sliderInput("nodesize", "Nodesize ",3 , min = 0,
max = 20, step = 1),
sliderInput("fontSize", "FontSize ",25 , min = 1,
max = 50, step = 1)
)
),
downloadButton("downloadData", "Download matrix"),
width=3),
mainPanel(
#tabPanel(
verbatimTextOutput("mlp"),
tabsetPanel(
#tabPanel("Force Network", forceNetworkOutput("g2",height="600px") ),
tabPanel("Network", forceNetworkOutput("g2",height="600px") ),
#             ),
#tabPanel("trans ",
tabPanel("Read matrix",
helpText("For large table, please use download button"),
checkboxInput("orderMLO", "Order by MLO", value = FALSE),
DT::dataTableOutput("mytable"),
),
#  mytable_fre
tabPanel("Frequency matrix",
#helpText("For large table, please use download button"),
checkboxInput("orderMLOFreq", "Order by MLO Freq", value = FALSE),
DT::dataTableOutput("mytable_fre")
),
tabPanel("Transcript structure",plotOutput("trans_struc",height="500px") ),
tabPanel("MLO plot",plotOutput("mlpPlot",height="700px") ),
tabPanel("Contact info",   HTML(paste0("limeng@picb.ac.cn <br>",
"") ) )
)
# ) "I will continue to update these most likely order lists when I got new data or developing new algorithm"
)
)
),
tabPanel("Download_MLO",
selectInput("downloadOrganism","Organism", choices=names(t_igraph_list_parent),
selected=init_organism ),
downloadButton("downloadAllOrders", "Download Most Likely Orders")
)
)
names(t_igraph_list_parent)
init_organism
sort(t_igraph_list_parent[[init_organism]]$all_gene_symbol_graph)
init_organism
t_igraph_list
as.character(sapply(t_igraph_list,"[",1) );
t_igraph_list_parent[["human"]]$all_gene_symbol_graph<-as.character(sapply(t_igraph_list,"[",1) );
View(t_igraph_list_parent[["human"]]$all_gene_symbol_graph)
t_igraph_list_parent[[init_organism]]$all_gene_symbol_graph
init_gene_symbol
init_trans_choices
init_trans_selected
init_gene_symbol
intersect(
subset(t_igraph_list_parent[[init_organism]]$gene_trans_id_map,gene_symbol==init_gene_symbol,select=trans_id)[,1],
t_igraph_list_parent[[init_organism]]$all_trans_id_graph
)
subset(t_igraph_list_parent[[init_organism]]$gene_trans_id_map,gene_symbol==init_gene_symbol,select=trans_id)[,1]
t_igraph_list_parent[[init_organism]]$all_trans_id_graph
t_igraph_list_parent[["human"]]$all_trans_id_graph<-as.character(sapply(t_igraph_list,"[",2) );
source('~/Documents/projects/iso/intron_order/code/app_r.R', echo=TRUE)
init_trans_selected
init_trans_choices
source('~/Documents/projects/iso/intron_order/code/app_r.R', echo=TRUE)
init_organism
names(t_igraph_list_parent)
init_trans_choices
init_trans_selected
init_gene_symbol
init_organism
source('~/Documents/projects/iso/intron_order/code/app_r.R', echo=TRUE)
source('~/Documents/projects/iso/intron_order/code/app_r.R', echo=TRUE)
names(t_igraph_list_parent)
ui <- navbarPage("Intron splicing order",
#fontSize
#titlePanel(title="","Intron splicing order"),
#textOutput("mlp2"),
#hr(),
tabPanel("Viewer",
sidebarLayout(
sidebarPanel(
# init_gene_symbol
tabsetPanel(
tabPanel("Cal-pars",
selectInput("organism","Organism", choices=c(names(t_igraph_list_parent)),
selected=init_organism ),
selectInput("gene","Gene", choices=sort(t_igraph_list_parent[[init_organism]]$all_gene_symbol_graph),
selected=init_gene_symbol ),
selectInput("transcript","Transcript",
choices=init_trans_choices ,
selected=init_trans_selected ) ,
sliderInput("readCount", "ReadCount ",0 , min = 0,
max = 50, step = 1),
sliderInput("alpha", "Adjust value ",0.1 , min = 0,
max = 1, step = 0.01)
),
tabPanel("Graph-par",
#actionButton("update","update"),
sliderInput("charge", "Charge ", -50, min = -300,
max = 0, step = 1),
sliderInput("linkDistance", "LinkDistance ",250 , min = 0,
max = 800, step = 1),
sliderInput("nodesize", "Nodesize ",3 , min = 0,
max = 20, step = 1),
sliderInput("fontSize", "FontSize ",25 , min = 1,
max = 50, step = 1)
)
),
downloadButton("downloadData", "Download matrix"),
width=3),
mainPanel(
#tabPanel(
verbatimTextOutput("mlp"),
tabsetPanel(
#tabPanel("Force Network", forceNetworkOutput("g2",height="600px") ),
tabPanel("Network", forceNetworkOutput("g2",height="600px") ),
#             ),
#tabPanel("trans ",
tabPanel("Read matrix",
helpText("For large table, please use download button"),
checkboxInput("orderMLO", "Order by MLO", value = FALSE),
DT::dataTableOutput("mytable"),
),
#  mytable_fre
tabPanel("Frequency matrix",
#helpText("For large table, please use download button"),
checkboxInput("orderMLOFreq", "Order by MLO Freq", value = FALSE),
DT::dataTableOutput("mytable_fre")
),
tabPanel("Transcript structure",plotOutput("trans_struc",height="500px") ),
tabPanel("MLO plot",plotOutput("mlpPlot",height="700px") ),
tabPanel("Contact info",   HTML(paste0("limeng@picb.ac.cn <br>",
"") ) )
)
# ) "I will continue to update these most likely order lists when I got new data or developing new algorithm"
)
)
),
tabPanel("Download_MLO",
selectInput("downloadOrganism","Organism", choices=c(names(t_igraph_list_parent)),
selected=init_organism ),
downloadButton("downloadAllOrders", "Download Most Likely Orders")
)
)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/projects/iso/intron_order/code/app_r.R', echo=TRUE)
